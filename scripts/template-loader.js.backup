document.addEventListener('DOMContentLoaded', async () => {
    try {
        // Load components
        await loadComponent('header-placeholder', 'components/header.html');
        await loadComponent('footer-placeholder', 'components/footer.html');
        
        // Initialize scripts after components are loaded
        await loadScripts();
        
        // Initialize theme and navigation after all scripts are loaded
        if (typeof initializeNavigation === 'function') {
            initializeNavigation();
        }
        if (typeof initializeTheme === 'function') {
            initializeTheme();
        }
    } catch (error) {
        console.error('Error:', error);
        handleError();
    }
});

async function loadComponent(placeholderId, componentPath) {
    const placeholder = document.getElementById(placeholderId);
    if (!placeholder) {
        throw new Error(`Placeholder not found: ${placeholderId}`);
    }

    try {
        const response = await fetch(componentPath);
        if (!response.ok) {
            throw new Error(`Failed to load ${componentPath}: ${response.status}`);
        }
        const html = await response.text();
        placeholder.insertAdjacentHTML('beforeend', html);
    } catch (error) {
        throw new Error(`Component loading failed: ${error.message}`);
    }
}

async function loadScripts() {
    const scripts = [
        'scripts/app.js',
        'scripts/page.js'
    ];
    
    for (const scriptPath of scripts) {
        try {
            await loadScript(scriptPath);
        } catch (error) {
            console.error(`Failed to load ${scriptPath}:`, error);
        }
    }
}

function loadScript(src) {
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = src;
        script.onload = resolve;
        script.onerror = reject;
        document.body.appendChild(script);
    });
}

function handleError() {
    const mainContent = document.querySelector('main');
    if (mainContent) {
        // Preserve main content if components fail to load
        document.body.innerHTML = '';
        document.body.appendChild(mainContent);
    }
    console.error('Failed to load components. Main content preserved.');
}
const templateLoader = new Promise((resolve) => {
    const checkComponents = setInterval(() => {
        const header = document.querySelector('.navbar');
        const hamburger = document.querySelector('.hamburger');
        const navMenu = document.querySelector('.nav-menu');
        
        if (header && hamburger && navMenu) {
            console.log('Components loaded successfully');
            clearInterval(checkComponents);
            resolve();
        }
    }, 100);

    // Increase timeout to 10 seconds
    setTimeout(() => {
        clearInterval(checkComponents);
        console.warn('Components loaded with timeout - some elements might be missing');
        resolve();
    }, 10000);
});